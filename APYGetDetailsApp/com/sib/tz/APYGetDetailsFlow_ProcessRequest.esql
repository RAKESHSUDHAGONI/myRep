

BROKER SCHEMA com.sib.tz
DECLARE configFilePath EXTERNAL CHARACTER '';
DECLARE auditQ EXTERNAL CHARACTER '';
DECLARE errorQ EXTERNAL CHARACTER '';
DECLARE failureQ EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE APYGetDetailsFlow_ProcessRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		IF FIELDNAME(Environment.Variables) IS NULL THEN
			CREATE FIELD Environment.Variables;
		END IF;
		DECLARE ev REFERENCE TO Environment.Variables;
		DECLARE om REFERENCE TO OutputRoot;

		CREATE FIELD ev.LogPointID;
		-- CREATE FIELD ev.ReqURL;
		CREATE FIELD ev.APIName;
		CREATE FIELD ev.APIVersion;
		CREATE FIELD ev.InterfaceName;
		CREATE FIELD ev.globalConfig;
		CREATE FIELD ev.serviceConfig;
		CREATE FIELD ev.configFilePath;
		CREATE FIELD ev.auditQ;
		CREATE FIELD ev.errorQ;
		CREATE FIELD ev.failureQ;

		CREATE FIELD ev.GlobalTranID;
		CREATE FIELD ev.GwyTranID;
		SET ev.GlobalTranID=COALESCE(InputRoot.HTTPInputHeader.Globaltranid,'NULL');
		SET ev.GwyTranID=COALESCE(InputRoot.HTTPInputHeader.Gwytranid,'NULL');

		SET ev.LogPointID='OrigRequest';
		-- SET ev.ReqURL=ReqURL;
		SET ev.APIName=InputRoot.HTTPInputHeader.Apiname;
		SET ev.APIVersion=InputRoot.HTTPInputHeader.Apiversion;
		SET ev.InterfaceName=ApplicationLabel;
		SET ev.configFilePath='/home/migration/MIGRATION_TEST/Test1';
		SET ev.auditQ=auditQ;
		SET ev.errorQ=errorQ;
		SET ev.failureQ=failureQ;

		SET OutputLocalEnvironment.Destination.File.Directory =ev.configFilePath;
		SET OutputLocalEnvironment.Destination.File.Name='ESBConfig.txt';
--		 SET OutputLocalEnvironment.Destination.File.Name = parsedFileName;
		PROPAGATE TO TERMINAL 'out2' FINALIZE NONE DELETE NONE;
		SET OutputLocalEnvironment.Destination.File.Directory =ev.configFilePath;
		SET OutputLocalEnvironment.Destination.File.Name = 'ErrorMapping.txt';
		PROPAGATE TO TERMINAL 'out2' FINALIZE NONE DELETE NONE;
		SET OutputLocalEnvironment.Destination.File.Directory =ev.configFilePath;
		SET OutputLocalEnvironment.Destination.File.Name = 'APYDetailsMapping.txt';
		PROPAGATE TO TERMINAL 'out2' FINALIZE NONE DELETE NONE;

		SET ev.globalConfig=ev.ESBConfig.XMLNSC.ESBConfig.Global;
		SET ev.serviceConfig= THE(SELECT * FROM ev.ESBConfig.XMLNSC.ESBConfig.Service.Interface[] AS II WHERE II.SVC_NAME=ev.InterfaceName);
		SET ev.ESBConfig=null;

		IF ev.InterfaceName='iib_Authenticate_app' THEN
		ELSE
			CREATE LASTCHILD OF ev.Request DOMAIN 'JSON' PARSE (InputRoot.BLOB.BLOB);
		END IF;		


		IF ev.globalConfig.GBL_AUDIT_ENABLED='Y' THEN
			IF ev.serviceConfig.SVC_AUDIT_ENABLED='Y' THEN
				PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
			ELSE
			END IF;
		ELSE
		END IF;
		SET ev.apygetdetailsauth=THE(SELECT * FROM ev.APYDetailsMapping.XMLNSC.APYDetailsMapping.record[] AS II WHERE II.MerchantCode=ev.Request.JSON.Data.Request.Body.merchant_code);

		SET om.BLOB=NULL;
		CREATE LASTCHILD OF om DOMAIN 'JSON';
		IF ev.apygetdetailsauth.MerchantCode = ev.Request.JSON.Data.Request.Body.merchant_code AND ev.apygetdetailsauth.MerchantName = ev.Request.JSON.Data.Request.Body.merchant_name THEN

			SET om.JSON.Data.FORACID = ev.Request.JSON.Data.Request.Body.FORACID;

			SET ev.LogPointID='BackendRequest';
			IF ev.globalConfig.GBL_AUDIT_ENABLED='Y' THEN
				IF ev.serviceConfig.SVC_AUDIT_ENABLED='Y' THEN
					PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
				ELSE
				END IF;
			ELSE
--				PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
			END IF;

			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method =ev.serviceConfig.SVC_BACKENDREQMETHOD;
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL='http://192.168.0.251:7800/test1';
			PROPAGATE TO TERMINAL 'out' FINALIZE NONE DELETE NONE;
			
		ELSE
			SET om.JSON.Data.Response.Header.Timestamp=ev.Request.JSON.Data.Request.Header.Timestamp;
			SET om.JSON.Data.Response.Header.APIName=COALESCE(ev.APIName,ev.LogMessage.MetaData.APIName);
			SET om.JSON.Data.Response.Header.APIVersion=COALESCE(ev.APIVersion,ev.LogMessage.MetaData.APIVersion);
			SET om.JSON.Data.Response.Header.Interface=COALESCE(ev.InterfaceName,ev.LogMessage.MetaData.InterfaceName);
			SET om.JSON.Data.Response.Status.Code = 'ESBSE103';
			SET om.JSON.Data.Response.Status.Description = 'Authentication Failed';
			SET om.JSON.Data.Response.Body.Description = 'Contact Admin';

			SET ev.LogPointID='FinalResponse';
			IF ev.globalConfig.GBL_AUDIT_ENABLED='Y' THEN
				IF ev.serviceConfig.SVC_AUDIT_ENABLED='Y' THEN
					PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
				ELSE
				END IF;
			ELSE
			END IF;
			PROPAGATE TO TERMINAL 'out3' DELETE NONE;
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;