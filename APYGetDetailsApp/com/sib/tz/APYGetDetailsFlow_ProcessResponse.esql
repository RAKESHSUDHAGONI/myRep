

BROKER SCHEMA com.sib.tz


CREATE COMPUTE MODULE APYGetDetailsFlow_ProcessResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		IF FIELDNAME(Environment.Variables) IS NULL THEN
			CREATE FIELD Environment.Variables;
		END IF;
		DECLARE ev REFERENCE TO Environment.Variables;
		DECLARE om REFERENCE TO OutputRoot;
		SET ev.LogPointID='BackendResponse';
		IF ev.globalConfig.GBL_AUDIT_ENABLED='Y' THEN
			IF ev.serviceConfig.SVC_AUDIT_ENABLED='Y' THEN
				PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
			ELSE
			END IF;
		ELSE
		END IF;
		SET om.BLOB=NULL;
		CREATE LASTCHILD OF ev.Response DOMAIN 'JSON' PARSE(InputRoot.BLOB.BLOB);
		SET OutputRoot.JSON.Data.Response.Header.Timestamp = ev.Request.JSON.Data.Request.Header.Timestamp;
		SET OutputRoot.JSON.Data.Response.Header.APIName = COALESCE(ev.APIName,ev.LogMessage.MetaData.APIName);
		SET OutputRoot.JSON.Data.Response.Header.APIVersion = COALESCE(ev.APIVersion,ev.LogMessage.MetaData.APIVersion);
		SET OutputRoot.JSON.Data.Response.Header.Interface = COALESCE(ev.InterfaceName,ev.LogMessage.MetaData.InterfaceName);

		IF CONTAINS(ev.Response.JSON.Data.status, 'SUCCESS') THEN
			SET om.JSON.Data.Response.Status.Code = '200';
			SET OutputRoot.JSON.Data.Response.Status.Desc ='Success';
			SET OutputRoot.JSON.Data.Response.Body = ev.Response.JSON.Data;

		ELSE
			SET om.JSON.Data.Response.Status.Code = '406';
			SET OutputRoot.JSON.Data.Response.Status.Desc ='Failure';
			SET OutputRoot.JSON.Data.Response.Body = ev.Response.JSON.Data;

		END IF;

		PROPAGATE TO TERMINAL 'out' FINALIZE NONE DELETE NONE;

		SET ev.LogPointID='FinalResponse';
		IF ev.globalConfig.GBL_AUDIT_ENABLED='Y' THEN
			IF ev.serviceConfig.SVC_AUDIT_ENABLED='Y' THEN
				PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
			ELSE
			END IF;
		ELSE
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;